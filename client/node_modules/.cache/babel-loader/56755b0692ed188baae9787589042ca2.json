{"ast":null,"code":"import React,{useEffect}from'react';import{useQuery}from'@apollo/client';import{useSelector}from'react-redux';import{useStoreContext}from'../../utils/SuperState';import{UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY}from'../../utils/actions';import{QUERY_CATEGORIES}from'../../utils/queries';import{idbPromise}from'../../utils/helpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CategoryMenu(){var dispatch=useStoreContext();var state=useSelector(function(state){return state;});var categories=state.categories;var _useQuery=useQuery(QUERY_CATEGORIES),loading=_useQuery.loading,categoryData=_useQuery.data;useEffect(function(){if(categoryData){dispatch({type:UPDATE_CATEGORIES,categories:categoryData.categories});categoryData.categories.forEach(function(category){idbPromise('categories','put',category);});}else if(!loading){idbPromise('categories','get').then(function(categories){dispatch({type:UPDATE_CATEGORIES,categories:categories});});}},[categoryData,loading,dispatch]);var handleClick=function handleClick(id){dispatch({type:UPDATE_CURRENT_CATEGORY,currentCategory:id});};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Choose a Category:\"}),categories.map(function(item){return/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){handleClick(item._id);},children:item.name},item._id);})]});}export default CategoryMenu;","map":{"version":3,"sources":["C:/Users/mrcar/Homework/Redux-Store/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","useSelector","useStoreContext","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","QUERY_CATEGORIES","idbPromise","CategoryMenu","dispatch","state","categories","loading","categoryData","data","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,QAAT,KAAyB,gBAAzB,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,eAAT,KAAgC,wBAAhC,CACA,OACEC,iBADF,CAEEC,uBAFF,KAGO,qBAHP,CAIA,OAASC,gBAAT,KAAiC,qBAAjC,CACA,OAASC,UAAT,KAA2B,qBAA3B,C,wFAGA,QAASC,CAAAA,YAAT,EAAwB,CACtB,GAAMC,CAAAA,QAAQ,CAAGN,eAAe,EAAhC,CACA,GAAMO,CAAAA,KAAK,CAAGR,WAAW,CAAC,SAACQ,KAAD,QAAWA,CAAAA,KAAX,EAAD,CAAzB,CAEA,GAAQC,CAAAA,UAAR,CAAuBD,KAAvB,CAAQC,UAAR,CAEA,cAAwCV,QAAQ,CAACK,gBAAD,CAAhD,CAAQM,OAAR,WAAQA,OAAR,CAAuBC,YAAvB,WAAiBC,IAAjB,CAEAd,SAAS,CAAC,UAAM,CACd,GAAIa,YAAJ,CAAkB,CAChBJ,QAAQ,CAAC,CACPM,IAAI,CAAEX,iBADC,CAEPO,UAAU,CAAEE,YAAY,CAACF,UAFlB,CAAD,CAAR,CAIAE,YAAY,CAACF,UAAb,CAAwBK,OAAxB,CAAgC,SAACC,QAAD,CAAc,CAC5CV,UAAU,CAAC,YAAD,CAAe,KAAf,CAAsBU,QAAtB,CAAV,CACD,CAFD,EAGD,CARD,IAQO,IAAI,CAACL,OAAL,CAAc,CACnBL,UAAU,CAAC,YAAD,CAAe,KAAf,CAAV,CAAgCW,IAAhC,CAAqC,SAACP,UAAD,CAAgB,CACnDF,QAAQ,CAAC,CACPM,IAAI,CAAEX,iBADC,CAEPO,UAAU,CAAEA,UAFL,CAAD,CAAR,CAID,CALD,EAMD,CACF,CAjBQ,CAiBN,CAACE,YAAD,CAAeD,OAAf,CAAwBH,QAAxB,CAjBM,CAAT,CAmBA,GAAMU,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,EAAD,CAAQ,CAC1BX,QAAQ,CAAC,CACPM,IAAI,CAAEV,uBADC,CAEPgB,eAAe,CAAED,EAFV,CAAD,CAAR,CAID,CALD,CAOA,mBACE,oCACE,0CADF,CAEGT,UAAU,CAACW,GAAX,CAAe,SAACC,IAAD,qBACd,eAEE,OAAO,CAAE,kBAAM,CACbJ,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX,CACD,CAJH,UAMGD,IAAI,CAACE,IANR,EACOF,IAAI,CAACC,GADZ,CADc,EAAf,CAFH,GADF,CAeD,CAED,cAAehB,CAAAA,YAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useSelector } from 'react-redux';\r\nimport { useStoreContext } from '../../utils/SuperState';\r\nimport {\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n} from '../../utils/actions';\r\nimport { QUERY_CATEGORIES } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\n\r\nfunction CategoryMenu() {\r\n  const dispatch = useStoreContext();\r\n  const state = useSelector((state) => state);\r\n\r\n  const { categories } = state;\r\n\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  useEffect(() => {\r\n    if (categoryData) {\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories,\r\n      });\r\n      categoryData.categories.forEach((category) => {\r\n        idbPromise('categories', 'put', category);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise('categories', 'get').then((categories) => {\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories,\r\n        });\r\n      });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n  const handleClick = (id) => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      {categories.map((item) => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n"]},"metadata":{},"sourceType":"module"}